// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: keys.proto

package keys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeysService_Notify_FullMethodName = "/grpc.KeysService/Notify"
	KeysService_Give_FullMethodName   = "/grpc.KeysService/Give"
)

// KeysServiceClient is the client API for KeysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeysServiceClient interface {
	Notify(ctx context.Context, in *NotifyAmountReq, opts ...grpc.CallOption) (*NotifyAmountRes, error)
	Give(ctx context.Context, in *GiveKeysReq, opts ...grpc.CallOption) (*GiveKeysRes, error)
}

type keysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeysServiceClient(cc grpc.ClientConnInterface) KeysServiceClient {
	return &keysServiceClient{cc}
}

func (c *keysServiceClient) Notify(ctx context.Context, in *NotifyAmountReq, opts ...grpc.CallOption) (*NotifyAmountRes, error) {
	out := new(NotifyAmountRes)
	err := c.cc.Invoke(ctx, KeysService_Notify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keysServiceClient) Give(ctx context.Context, in *GiveKeysReq, opts ...grpc.CallOption) (*GiveKeysRes, error) {
	out := new(GiveKeysRes)
	err := c.cc.Invoke(ctx, KeysService_Give_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeysServiceServer is the server API for KeysService service.
// All implementations must embed UnimplementedKeysServiceServer
// for forward compatibility
type KeysServiceServer interface {
	Notify(context.Context, *NotifyAmountReq) (*NotifyAmountRes, error)
	Give(context.Context, *GiveKeysReq) (*GiveKeysRes, error)
	mustEmbedUnimplementedKeysServiceServer()
}

// UnimplementedKeysServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeysServiceServer struct {
}

func (UnimplementedKeysServiceServer) Notify(context.Context, *NotifyAmountReq) (*NotifyAmountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedKeysServiceServer) Give(context.Context, *GiveKeysReq) (*GiveKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Give not implemented")
}
func (UnimplementedKeysServiceServer) mustEmbedUnimplementedKeysServiceServer() {}

// UnsafeKeysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeysServiceServer will
// result in compilation errors.
type UnsafeKeysServiceServer interface {
	mustEmbedUnimplementedKeysServiceServer()
}

func RegisterKeysServiceServer(s grpc.ServiceRegistrar, srv KeysServiceServer) {
	s.RegisterService(&KeysService_ServiceDesc, srv)
}

func _KeysService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysService_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysServiceServer).Notify(ctx, req.(*NotifyAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeysService_Give_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeysServiceServer).Give(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeysService_Give_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeysServiceServer).Give(ctx, req.(*GiveKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KeysService_ServiceDesc is the grpc.ServiceDesc for KeysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.KeysService",
	HandlerType: (*KeysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _KeysService_Notify_Handler,
		},
		{
			MethodName: "Give",
			Handler:    _KeysService_Give_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keys.proto",
}
